// <auto-generated />
using System;
using Letgo.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Letgo.DataAccess.Migrations
{
    [DbContext(typeof(LetgoContext))]
    [Migration("20230529153856_dummyDataAdded")]
    partial class dummyDataAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Letgo.Entity.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Samsung markası",
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Mavi markası",
                            Name = "Mavi"
                        },
                        new
                        {
                            Id = 3,
                            Description = "JACK & JONES markası",
                            Name = "JACK & JONES"
                        },
                        new
                        {
                            Id = 4,
                            Description = "LTB markası",
                            Name = "LTB"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Vivense markası",
                            Name = "Vivense"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Madamecoco markası",
                            Name = "Madamecoco"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Koctaş markası",
                            Name = "Koctaş"
                        },
                        new
                        {
                            Id = 8,
                            Description = "English Home markası",
                            Name = "English Home"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Kitapyurdu markası",
                            Name = "Kitapyurdu"
                        },
                        new
                        {
                            Id = 10,
                            Description = "D&R markası",
                            Name = "D&R"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Idefix markası",
                            Name = "Idefix"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Morhipo markası",
                            Name = "Morhipo"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Decathlon markası",
                            Name = "Decathlon"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Koray Spor markası",
                            Name = "Koray Spor"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Fenerbahçe markası",
                            Name = "Fenerbahçe"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Flo markası",
                            Name = "Flo"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Arçelik markası",
                            Name = "Arçelik"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Vestel markası",
                            Name = "Vestel"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Dyson markası",
                            Name = "Dyson"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Apple markası",
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Nike markası",
                            Name = "Nike"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Adidas markası",
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Sony markası",
                            Name = "Sony"
                        },
                        new
                        {
                            Id = 24,
                            Description = "LG markası",
                            Name = "LG"
                        });
                });

            modelBuilder.Entity("Letgo.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Elektronik ürünler",
                            Name = "Elektronik",
                            Url = "elektronik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Giyim ve moda ürünleri",
                            Name = "Giyim ve Moda",
                            Url = "giyim-ve-moda"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ev ve dekorasyon ürünleri",
                            Name = "Ev ve Dekorasyon",
                            Url = "ev-ve-dekorasyon"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Kitaplar",
                            Name = "Kitaplar",
                            Url = "kitaplar"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Spor ve fitness ürünleri",
                            Name = "Spor ve Fitness",
                            Url = "spor-ve-fitness"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Beyaz eşya ürünleri",
                            Name = "Beyaz Eşya",
                            Url = "beyaz-esya"
                        });
                });

            modelBuilder.Entity("Letgo.Entity.Like", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Letgo.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Letgo.Entity.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails", (string)null);
                });

            modelBuilder.Entity("Letgo.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Letgo.Entity.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("Letgo.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "admin",
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "user",
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Letgo.Entity.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"), 1L, 1);

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Letgo.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("isLogin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "test adress admin",
                            City = "Çankırı",
                            DateOfBirth = new DateTime(2023, 5, 29, 18, 38, 55, 852, DateTimeKind.Local).AddTicks(510),
                            Email = "admin@gmail.com",
                            FirstName = "admin",
                            FullName = "admin admin",
                            Gender = "Erkek",
                            LastName = "admin",
                            Password = "123456",
                            ProfilePhoto = "https://cdn1.vectorstock.com/i/1000x1000/51/95/businessman-avatar-cartoon-character-profile-vector-25645195.jpg",
                            RoleId = 1,
                            isLogin = false
                        },
                        new
                        {
                            Id = 2,
                            Address = "test adress user",
                            City = "Çankırı",
                            DateOfBirth = new DateTime(2023, 5, 29, 18, 38, 55, 852, DateTimeKind.Local).AddTicks(528),
                            Email = "user@gmail.com",
                            FirstName = "user",
                            FullName = "user user",
                            Gender = "Kadın",
                            LastName = "user",
                            Password = "123456",
                            ProfilePhoto = "https://w0.peakpx.com/wallpaper/979/89/HD-wallpaper-purple-smile-design-eye-smily-profile-pic-face-thumbnail.jpg",
                            RoleId = 1,
                            isLogin = false
                        });
                });

            modelBuilder.Entity("Letgo.Entity.Like", b =>
                {
                    b.HasOne("Letgo.Entity.Product", "Product")
                        .WithMany("Likes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Letgo.Entity.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Letgo.Entity.Order", b =>
                {
                    b.HasOne("Letgo.Entity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Letgo.Entity.OrderDetail", b =>
                {
                    b.HasOne("Letgo.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Letgo.Entity.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Letgo.Entity.Product", b =>
                {
                    b.HasOne("Letgo.Entity.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Letgo.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Letgo.Entity.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Letgo.Entity.ProductTag", b =>
                {
                    b.HasOne("Letgo.Entity.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Letgo.Entity.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Letgo.Entity.User", b =>
                {
                    b.HasOne("Letgo.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Letgo.Entity.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Letgo.Entity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Letgo.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Letgo.Entity.Product", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("Letgo.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Letgo.Entity.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("Letgo.Entity.User", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
